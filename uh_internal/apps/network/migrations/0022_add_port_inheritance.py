# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-02-05 16:31
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


def correct_parent_pointer(apps, schema_editor):
    NetworkDevice = apps.get_model('portmap', 'NetworkDevice')
    Port = apps.get_model('portmap', 'port')

    for port in Port.objects.all():
        try:
            network_device = NetworkDevice.objects.get(display_name=port.old_jack, room=port.old_room)
        except NetworkDevice.MultipleObjectsReturned:  # Inconsistent data
            print('Room: ' + str(port.old_room) + ', Jack: ' + str(port.old_jack))
            network_device = NetworkDevice.objects.filter(display_name=port.old_jack, room=port.old_room, port__isnull=True).first()

        port.networkdevice_ptr = network_device
        port.save()


def reverse_code(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('portmap', '0021_create_network_devices_from_ports'),
    ]

    operations = [
        migrations.RenameField(
            model_name='accesspoint',
            old_name='port',
            new_name='old_port',  # Avoid conflict in NetworkDevice with Port class
        ),
        migrations.AlterField(
            model_name='accesspoint',
            name='old_port',
            field=models.IntegerField(),  # Remove foreign key constraint
        ),
        migrations.RenameField(
            model_name='port',
            old_name='blade',
            new_name='blade_number',  # Be consistent with port number
        ),
        migrations.RenameField(
            model_name='port',
            old_name='jack',
            new_name='old_jack',
        ),
        migrations.RenameField(
            model_name='port',
            old_name='room',
            new_name='old_room',
        ),
        migrations.RenameField(
            model_name='port',
            old_name='port',
            new_name='port_number',  # Avoid conflict in NetworkDevice with Port class
        ),
        migrations.AddField(
            model_name='port',
            name='networkdevice_ptr',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, serialize=False, to='portmap.NetworkDevice'),
            preserve_default=False,
        ),
        migrations.RunPython(
            correct_parent_pointer,
            reverse_code=reverse_code,
        ),
        migrations.RemoveField(
            model_name='port',
            name='switch_ip',
        ),
        migrations.RemoveField(
            model_name='port',
            name='switch_name',
        ),
        migrations.RunSQL(  # Remove AUTO_INCREMENT
            'ALTER TABLE `portmap_port` CHANGE `id` `id` INT(11) NOT NULL;',
        ),
        migrations.RunSQL(  # Change primary key in single operation
            'ALTER TABLE `portmap_port` DROP PRIMARY KEY, ADD PRIMARY KEY(`networkdevice_ptr_id`);',
        ),
        migrations.AlterField(
            model_name='port',
            name='id',
            field=models.IntegerField(),  # Remove foreign key constraint
        ),
        migrations.RenameField(
            model_name='port',
            old_name='id',
            new_name='old_id',
        ),
        migrations.AlterField(
            model_name='port',
            name='networkdevice_ptr',
            field=models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='portmap.NetworkDevice'),
            preserve_default=False,
        ),
    ]
