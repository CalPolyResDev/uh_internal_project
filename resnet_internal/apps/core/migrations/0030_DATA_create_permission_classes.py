# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-02-26 15:11
from __future__ import unicode_literals

from django.db import migrations
from ....settings.base import TICKET_ACCESS, ROOMS_ACCESS, ROOMS_MODIFY_ACCESS, DAILY_DUTIES_ACCESS, ORIENTATION_ACCESS, TECHNICIAN_LIST_ACCESS, NETWORK_ACCESS, NETWORK_MODIFY_ACCESS, COMPUTERS_ACCESS, COMPUTERS_MODIFY_ACCESS, COMPUTERS_RECORD_MODIFY_ACCESS, PRINTERS_ACCESS, PRINTERS_MODIFY_ACCESS, CSD_ASSIGNMENT_ACCESS, ROSTER_ACCESS
from resnet_internal.settings.base import RESIDENT_LOOKUP_ACCESS,\
    PRINTER_REQUEST_CREATE_ACCESS, DEVELOPER_ACCESS

TIMESHEET_ACCESS = 'timesheet'

PermissionClasses = [
    {
        'name': DEVELOPER_ACCESS,
        'groups': ['ResNet Developer'],
    },
    {
        'name': TICKET_ACCESS,
        'groups': ['UH TAG Member', 'ResNet Technician'],
    },
    {
        'name': ROOMS_ACCESS,
        'groups': ['UH TAG Member', 'UH TAG Member (Read-only)', 'ResNet Technician'],
    },
    {
        'name': ROOMS_MODIFY_ACCESS,
        'groups': ['UH TAG Member', 'ResNet Technician'],
    },
    {
        'name': DAILY_DUTIES_ACCESS,
        'groups': ['ResNet Technician', 'UH TAG'],
    },
    {
        'name': ORIENTATION_ACCESS,
        'groups': ['ResNet Technician'],
    },
    {
        'name': TECHNICIAN_LIST_ACCESS,
        'groups': ['ResNet Staff', 'ResNet Developer'],
    },
    {
        'name': NETWORK_ACCESS,
        'groups': ['UH TAG Member', 'UH TAG Member (Read-only)', 'ResNet Technician', 'ITS Network Administrator', 'ITS Telecom Administrator'],
    },
    {
        'name': NETWORK_MODIFY_ACCESS,
        'groups': ['UH TAG Member', 'ResNet Technician', 'ITS Network Administrator', 'ITS Telecom Administrator'],
    },
    {
        'name': COMPUTERS_ACCESS,
        'groups': ['ResNet Technician', 'UH TAG Member', 'UH TAG Member (Read-only)'],
    },
    {
        'name': COMPUTERS_MODIFY_ACCESS,
        'groups': ['ResNet Technician', 'UH TAG Member'],
    },
    {
        'name': COMPUTERS_RECORD_MODIFY_ACCESS,
        'groups': ['UH TAG Member', 'ResNet Technician'],
    },
    {
        'name': PRINTERS_ACCESS,
        'groups': ['ResNet Technician', 'UH TAG Member', 'UH TAG Member (Read-only)'],
    },
    {
        'name': PRINTERS_MODIFY_ACCESS,
        'groups': ['ResNet Technician', 'UH TAG Member', 'UH TAG Member (Read-only)'],
    },
    {
        'name': CSD_ASSIGNMENT_ACCESS,
        'groups': ['Residential Life Manager', 'UH TAG Member', 'ResNet Developer'],
    },
    {
        'name': ROSTER_ACCESS,
        'groups': ['UH TAG Member', 'ResNet Developer', 'RA', 'Front Desk Staff', 'Residential Life Staff', 'CSD'],
    },
    {
        'name': RESIDENT_LOOKUP_ACCESS,
        'groups': ['UH TAG Member', 'ResNet Developer', 'RA', 'Front Desk Staff', 'Residential Life Staff', 'CSD', 'ResNet Technician'],
    },
    {
        'name': PRINTER_REQUEST_CREATE_ACCESS,
        'groups': ['UH TAG Member', 'ResNet Technician', 'RA', 'Front Desk Staff', 'Residential Life Staff', 'CSD'],
    },
    {
        'name': TIMESHEET_ACCESS,
        'groups': ['ResNet Technician', 'RA', 'Front Desk Staff'],
    }
]


def add_permission_classes(apps, schema_editor):
    PermissionClass = apps.get_model('core', 'PermissionClass')
    ADGroup = apps.get_model('core', 'ADGroup')

    for new_class in PermissionClasses:
        if not PermissionClass.objects.filter(name=new_class['name']).exists():
            permission_class = PermissionClass()
            permission_class.name = new_class['name']
            permission_class.save()

            for group_name in new_class['groups']:
                try:
                    ad_group = ADGroup.objects.get(display_name=group_name)
                except ADGroup.DoesNotExist:
                    continue
                else:
                    permission_class.groups.add(ad_group)

            permission_class.save()

NAVBAR_PERMISSION_CLASSES = [
    {
        'link': 'Reslife Resources',
        'classes': [CSD_ASSIGNMENT_ACCESS, ROSTER_ACCESS, RESIDENT_LOOKUP_ACCESS],
    },
    {
        'link': 'Developer Resources',
        'classes': [DEVELOPER_ACCESS],
    },
    {
        'link': 'Staff Resources',
        'classes': [TECHNICIAN_LIST_ACCESS],
    },
    {
        'link': 'Network Administration',
        'classes': [NETWORK_MODIFY_ACCESS],
    },
    {
        'link': 'Databases',
        'classes': [ROOMS_ACCESS, NETWORK_ACCESS, COMPUTERS_ACCESS, PRINTERS_ACCESS],
    },
    {
        'link': 'General Resources',
        'classes': None,
    },
    {
        'link': 'Daily Duties',
        'classes': [DAILY_DUTIES_ACCESS],
    },
    {
        'link': 'Printer Requests',
        'classes': [DAILY_DUTIES_ACCESS],
    },
    {
        'link': 'Ticket Manager',
        'classes': [DAILY_DUTIES_ACCESS],
    },
    {
        'link': 'Voicemail',
        'classes': [DAILY_DUTIES_ACCESS],
    },
    {
        'link': 'Email',
        'classes': [DAILY_DUTIES_ACCESS],
    },
    {
        'link': 'Timesheet',
        'classes': [TIMESHEET_ACCESS],
    },
    {
        'link': 'Wikis',
        'classes': None,
    },
    {
        'link': 'ResLife Internal',
        'classes': None,
    },
    {
        'link': 'Portal',
        'classes': None,
    },
    {
        'link': 'Rooms',
        'classes': [ROOMS_ACCESS],
    },
    {
        'link': 'Access Points',
        'classes': [NETWORK_ACCESS],
    },
    {
        'link': 'Printers',
        'classes': [PRINTERS_ACCESS],
    },
    {
        'link': 'Computers',
        'classes': [COMPUTERS_ACCESS],
    },
    {
        'link': 'Ports',
        'classes': [NETWORK_ACCESS],
    },
    {
        'link': 'Aruba Airwaves',
        'classes': [NETWORK_MODIFY_ACCESS],
    },
    {
        'link': 'Aruba Controllers',
        'classes': [NETWORK_MODIFY_ACCESS],
    },
    {
        'link': 'Aruba ClearPass',
        'classes': [NETWORK_MODIFY_ACCESS],
    },
    {
        'link': 'Manage Technicians',
        'classes': [TECHNICIAN_LIST_ACCESS],
    },
    {
        'link': 'Provide Feedback',
        'classes': [DEVELOPER_ACCESS],
    },
    {
        'link': 'Sentry',
        'classes': [DEVELOPER_ACCESS],
    },
    {
        'link': 'BitBucket Server',
        'classes': [DEVELOPER_ACCESS],
    },
    {
        'link': 'JIRA',
        'classes': [DEVELOPER_ACCESS],
    },
    {
        'link': 'Administration Site',
        'classes': [DEVELOPER_ACCESS],
    },
    {
        'link': 'Ordered Items',
        'classes': [DAILY_DUTIES_ACCESS],
    },
    {
        'link': 'Check Inventory',
        'classes': [DAILY_DUTIES_ACCESS],
    },
    {
        'link': 'Failover Controller',
        'classes': [NETWORK_MODIFY_ACCESS],
    },
    {
        'link': 'Master Controller',
        'classes': [NETWORK_MODIFY_ACCESS],
    },
    {
        'link': 'Halls Controller',
        'classes': [NETWORK_MODIFY_ACCESS],
    },
    {
        'link': 'PCV Controller',
        'classes': [DAILY_DUTIES_ACCESS],
    },
    {
        'link': 'Secondary Airwaves',
        'classes': [NETWORK_MODIFY_ACCESS],
    },
    {
        'link': 'Primary Airwaves',
        'classes': [NETWORK_MODIFY_ACCESS],
    },
    {
        'link': 'ITS',
        'classes': [NETWORK_ACCESS],
    },
    {
        'link': 'ResNet',
        'classes': [NETWORK_ACCESS],
    },
    {
        'link': 'University Housing',
        'classes': None,
    },
    {
        'link': 'CSD Domains',
        'classes': [CSD_ASSIGNMENT_ACCESS],
    },
    {
        'link': 'Resident Lookup',
        'classes': [RESIDENT_LOOKUP_ACCESS],
    },
    {
        'link': 'Roster Generator',
        'classes': [ROSTER_ACCESS],
    },
]


def change_navbar_links_to_permission_classes(apps, schema_editor):
    NavbarLink = apps.get_model('core', 'NavbarLink')
    PermissionClass = apps.get_model('core', 'PermissionClass')

    for link_mapping in NAVBAR_PERMISSION_CLASSES:
        try:
            link = NavbarLink.objects.get(display_name=link_mapping['link'])
            link.permission_classes.clear()
        except NavbarLink.DoesNotExist:
            continue

        if not link_mapping['classes']:
            link.show_to_all = True
        else:
            for class_name in link_mapping['classes']:
                try:
                    permission_class = PermissionClass.objects.get(name=class_name)
                except PermissionClass.DoesNotExist:
                    continue
                else:
                    link.permission_classes.add(permission_class)

        link.save()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0029_add_permission_class'),
    ]

    operations = [
        migrations.RunPython(add_permission_classes),
        migrations.RunPython(change_navbar_links_to_permission_classes),
    ]
