{% load staticfiles %}
<script src='https://cdn.datatables.net/1.10.10/js/jquery.dataTables.min.js'></script>
<script src='https://cdn.datatables.net/1.10.10/js/dataTables.bootstrap.min.js'></script>

<script src='https://cdn.datatables.net/scroller/1.4.0/js/dataTables.scroller.min.js'></script>

<script type="text/javascript">
    function objectEquals(x, y) {
        'use strict';
    
        if (x === null || x === undefined || y === null || y === undefined) { return x === y; }
        // after this just checking type of one would be enough
        if (x.constructor !== y.constructor) { return false; }
        // if they are functions, they should exactly refer to same one (because of closures)
        if (x instanceof Function) { return x === y; }
        // if they are regexps, they should exactly refer to same one (it is hard to better equality check on current ES)
        if (x instanceof RegExp) { return x === y; }
        if (x === y || x.valueOf() === y.valueOf()) { return true; }
        if (Array.isArray(x) && x.length !== y.length) { return false; }
    
        // if they are dates, they must had equal valueOf
        if (x instanceof Date) { return false; }
    
        // if they are strictly equal, they both need to be object at least
        if (!(x instanceof Object)) { return false; }
        if (!(y instanceof Object)) { return false; }
    
        // recursive object equality check
        var p = Object.keys(x);
        return Object.keys(y).every(function (i) { return p.indexOf(i) !== -1; }) &&
            p.every(function (i) { return objectEquals(x[i], y[i]); });
    }


    var {{ datatable_name }};
    
    function redraw_datatables_row(row_object, rendered_row) {
        {{ datatable_name }}.row(row_object).data(rendered_row).draw('page');
    }
    
    {% if write_permission %}
        function confirm_remove(item_id) {
            var response = confirm('Are you sure you want to delete this {{ item_name|escapejs }}?');
            if (response) {
                ajaxPost("{{ remove_url|escapejs }}", {"item_id": item_id}, function(response_context) {
                    if (response_context["success"]) {
                        $("#"+ item_id).closest("tr").remove();
                        return true;
                    }
                    else {
                        alert(response_context["error_message"]);
                        return false;
                    }
                });
            } else {
                return false;
            }
        }
    {% endif %}

    // initialize the dataTable
    $(document).ready(function() {
        {{ datatable_name }} = $("#{{ datatable_name }}").DataTable({% autoescape off %}{{ datatable_options }}{% endautoescape %});
        
        // Create the overlay effect when processing
        {{ datatable_name }}.on('processing.dt', function(event, settings, processing) {
            if (processing) {
                $('[type="search"]').addClass('loading-spinner');
            }
            else {
                $('[type="search"]').removeClass('loading-spinner');
            }
        });

        // Add the popover to hoverable items
        {{ datatable_name }}.on('draw.dt', function() {
            $('[popover-data-url]').hover(
                function() {
                    var element = $(this);
                    element.off('hover');

                    $.get(element.attr('popover-data-url'), function(content) {
                        if (element.filter(":hover").length) {
                            element.popover({content: content,
                                        placement: 'left',
                                        html: true,
                                        container: 'body'
                            }).popover('show');
                        }
                    });

                },
                function() {
                    var element = $(this);
                    element.popover('hide');
                }
            );
        });

        {% if write_permission %}
            $("#{{ datatable_name }} tbody").on("dblclick", "tr", function () {
                var row_object = this;
                var row_id = $(this).attr("id");
                var csrftoken = Cookies.get('csrftoken');
                
                function csrfSafeMethod(method) {
                    // these HTTP methods do not require CSRF protection
                    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
                }
                $.ajaxSetup({
                    beforeSend: function(xhr, settings) {
                        if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
                            xhr.setRequestHeader("X-CSRFToken", csrftoken);
                        }
                    }
                });
            
                $.post("{{ datatable_form_url }}", {'item_id': row_id}, function( response ) {
                    // Copy form to DOM
                    for (var column in response.editable_row_columns) {
                        var query = $('#' + row_id + ' > td > [column="' + column + '"]')
                        query.append(response.editable_row_columns[column]);
                    }
                                 
                    // Initialize any date inputs
                    $("#" + row_id + " .dateinput").datepicker({
                        dateFormat: 'yy-mm-dd',
                    });
    
                    // Switch to write mode
                    $("#" + row_id + " .value-display").hide();
                    $("#" + row_id + " .editbox").show();
    
                    var editable_columns = $("#" + row_id + " .editbox:not([readonly])");
    
                    // Construct initial data array
                    var initial_data = {};
    
                    editable_columns.each(function () {
                        column_name = $(this).parent().attr("column");
                        value = $(this).val();
                        initial_data[column_name] = value;
                    });
    
                    // Set focus to first editable input
                    editable_columns.first().focus()
                    
                    // http://stackoverflow.com/a/16886052
                    var delayed_function, blurred_from;
    
                    $(row_object).one('blur', ':input', function(event) {
                        blurred_from = event.delegateTarget;
                        delayed_function = setTimeout(function() {
                            handle_edit();
                        }, 0);
                    });
    
                    $(row_object).one('focus', ':input', function(event) {
                        if (blurred_from === event.delegateTarget) {
                            clearTimeout(delayed_function);
                        }
                    });
                    
                    // Keypress actions
                    // http://stackoverflow.com/a/1160109
                    $(document).one('keyup', function() {
                        if (e.keyCode == 13 || e.keyCode == 27) {
                            handle_edit();
                        }
                    });
    
                    // User focused out of the row
                    function handle_edit() {
                        var changed_data = {};
    
                        // Get data post edit
                        editable_columns.each(function() {
                            column_name = $(this).parent().attr("column");
                            value = $(this).val();
                            changed_data[column_name] = value;
                        });
    
                        // Only send a change request if the data actually changed
                        if (!objectEquals(initial_data, changed_data)) {
                            // Attempt to send the data
                            var row_data = changed_data;
                            row_data["csrfmiddlewaretoken"] = getCookie('csrftoken');
                            row_data["id"] = row_id;
    
                            ajaxPost("{{ datatable_update_url }}", row_data, function(response_context) {
                                if (response_context["form_valid"]) {
                                    // Replace the edited row with updated html
                                    var rendered_row = response_context["rendered_row"];
    
                                    redraw_datatables_row(row_object, rendered_row);
    
                                    switch_to_read_mode();
    
                                    editable_columns.each(function() {
                                        $(this).parent().removeClass("has-error");
                                    });
                                }
                                else {
                                    alert("The update was unsuccessful:\n" + response_context["form_errors"].join("\n") + response_context["field_errors"].join("\n"));
    
                                    editable_columns.each(function() {
                                        column_name = $(this).parent().attr("column");
                                        
                                        if ($.inArray(column_name, response_context["fields_with_errors"]) != -1) {
                                            $(this).parent().addClass("has-error");
                                        }
                                    });
    
                                    return false;
                                }
                            });
                        }
                        else {
                            switch_to_read_mode();
                        }
                    };
                    
                    function switch_to_read_mode() {
                        // Switch back to read mode
                        $("#" + row_id + " .editbox").remove();
                        $("#" + row_id + " .value-display").show();
                    }
                });
            });
        {% endif %}
    });
</script>
